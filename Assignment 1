## Assigntment 1

## Task 1 - Answer the following questions
    # a. What is the medically relevant insight from the article?
    The current paper describes the transcriptional response to insulin in obese and non-obese individuals. 
    It shows that 78 genes were attenuated in the obese state compared with the non-obese state, thus "normalized" in the post-obese (PO) state. 
    The genes normalized in the PO state could be interesting to target as an attempt to improve the overall health of obese individuals.
    # b. Which genomics technology/ technologies were used?
    5' CAGE Profiling.

#  3. Further related research questions
    # a. List and explain at least three questions/ hypotheses you can think of that extend the analysis presented in the paper.
    1 - Does the WAT contain baseline (fasting) differences in genes expression in in the obese, post-obese state and never obese?
    2 - Which genes are most strongly correlated with the baseline characteristics such as free fatty acid levels, fat cell size, insulin
        both at baseline and in response to insulin?
    3 - Are the mitochondrial pathways impared in the obese state in response to insulin? 
        If so, are the same pathways normalized in the PO state or different in the never obese individuals?
    # b. [Optional] Devise a computational analysis strategy for (some of) the listed questions under 3a.
        By using the MitoCarta, one could isolate known mitochondrial proteins from the identified genes in the current dataset. 
        In a next step, one can perform a gene-set enrichment analysis of mitochondrial pathways, MitoPathways3.0 provided by the MitoCarta dataset.


## Task 2 - Git repositories and R Markdown

## Task 3

if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install()
install.packages("tidyverse")
library(BiocManager)
library(tidyverse)


## Task 4

# 4.1
data("CO2")

# 4.2
?"CO2"


# 4.3
CO2_results = as.data.frame(CO2 %>%
  group_by(Type) %>%
  summarise(meanUptake=mean(uptake), medianUptake=median(uptake), meanConc=mean(conc), medianConc=median(conc))
)

# 4.4


## Task 5

# 5.1 - The function "fun_ratio" calculates the ratio of mean / median
fun_ratio = function(x){
  ratio = mean(x) / median(x)
  return(ratio)
}

y = c(1,2,3,10,0)

fun_ratio(y)

# 5.2 - Write a function that ignores the lowest and the highest value from a given vector and calculate the mean.
fun_NoExtremes = function(x) {
  if (length(x) < 3) {
    stop("Vector must have at least 3 elements")
  }
  
  # Sort vector in ascending order
  sorted_x = sort(x)
  
  # Remove the lowest (first) and highest (last) values
  NoExtremes = sorted_x[-c(1, length(sorted_x))]
  
  # Calculate the mean of the new vector
  mean_value = mean(NoExtremes)
  
  return(mean_value)
}

fun_NoExtremes(y)

# 5.3 - Write a short (max. 300 characters, no spaces) explanation of why, how, and when not to use pipes.

# 5.4 - Write a short explanation the apply-family (max. 300 characters, no spaces) of why they could be useful in your work.

## Task 6

install.packages("remotes")
library(remotes)
install_url("http://emotion.utu.fi/wp-content/uploads/2019/11/nummenmaa_1.0.tar.gz",dependencies=TRUE)

magic_guys = read.csv("magic_guys.csv")

# 6.1a

hist(magic_guys$length)

ggplot(magic_guys, aes(magic_guys$length, color = magic_guys$species))+
  geom_histogram()


# 6.1b

ggplot(magic_guys, aes(magic_guys$species, magic_guys$length, fill = magic_guys$species))+
  geom_boxplot()+
  geom_col()
  
# 6.1c
ggsave("plot.png", plot = last_plot(), width = 5, height = 5)
ggsave("plot.pdf", plot = last_plot(), width = 5, height = 5)
ggsave("plot.svg", plot = last_plot(), width = 5, height = 5)

# 6.2a
microarray_data = read.delim("microarray_data.tab", header = TRUE, sep = "\t", quote = "")

str(microarray_data)

    ## 553 rows, 1000 columns

# 6.2b

missing_values = as.data.frame(is.na(microarray_data))
missing_quant = (colSums(missing_values))

gene_names = rownames(missing_quant)
missing_quant$gene_name = gene_names

missing_quant_df = missing_quant

ggplot(missing_quant, aes(missing_quant$gene_name, missing_quant_df$`colSums(missing_values)`))+
  geom_point()+
  theme_classic()

# 6.2c

percent_na = function(x){
  result = (x/nrow(microarray_data)) * 100

}

result = lapply(missing_quant, percent_na)

indi_10_20 = which(result > 10 & result <= 20)
indi_20_50 = which(result > 20 & result <= 50)
indi_50_100 = which(result > 50)

# 6.2d

for (c in colnames(microarray_data)) {
  av_expression = mean(microarray_data [[c]], na.rm = TRUE)  # Calculate the column mean excluding NAs
  microarray_data[[c]][is.na(microarray_data[[c]])] <- av_expression  # Replace NA with the mean
}
